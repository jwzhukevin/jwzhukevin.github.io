/*!
 * 轻量级jQuery替代方案 - 专为你的博客优化
 * 仅包含实际使用的功能，大小约为原版的1/10
 * 兼容你现有的jQuery代码
 */
(function(window) {
    'use strict';
    
    // 主要的$函数
    function $(selector) {
        return new $.fn.init(selector);
    }
    
    // 原型对象
    $.fn = $.prototype = {
        constructor: $,
        length: 0,
        
        // 初始化函数
        init: function(selector) {
            if (!selector) return this;
            
            if (typeof selector === 'string') {
                // CSS选择器
                var elements = document.querySelectorAll(selector);
                this.length = elements.length;
                for (var i = 0; i < elements.length; i++) {
                    this[i] = elements[i];
                }
            } else if (selector.nodeType) {
                // DOM元素
                this[0] = selector;
                this.length = 1;
            } else if (typeof selector === 'function') {
                // DOM ready
                if (document.readyState === 'loading') {
                    document.addEventListener('DOMContentLoaded', selector);
                } else {
                    selector();
                }
            }
            return this;
        },
        
        // 遍历方法
        each: function(callback) {
            for (var i = 0; i < this.length; i++) {
                callback.call(this[i], i, this[i]);
            }
            return this;
        },
        
        // CSS操作
        css: function(prop, value) {
            if (value === undefined) {
                return this[0] ? getComputedStyle(this[0])[prop] : undefined;
            }
            return this.each(function() {
                this.style[prop] = value;
            });
        },
        
        // 类操作
        addClass: function(className) {
            return this.each(function() {
                this.classList.add(className);
            });
        },
        
        removeClass: function(className) {
            return this.each(function() {
                this.classList.remove(className);
            });
        },
        
        toggleClass: function(className) {
            return this.each(function() {
                this.classList.toggle(className);
            });
        },
        
        hasClass: function(className) {
            return this[0] ? this[0].classList.contains(className) : false;
        },
        
        // 内容操作
        html: function(content) {
            if (content === undefined) {
                return this[0] ? this[0].innerHTML : undefined;
            }
            return this.each(function() {
                this.innerHTML = content;
            });
        },
        
        text: function(content) {
            if (content === undefined) {
                return this[0] ? this[0].textContent : undefined;
            }
            return this.each(function() {
                this.textContent = content;
            });
        },
        
        // 事件处理
        on: function(event, handler) {
            return this.each(function() {
                this.addEventListener(event, handler);
            });
        },
        
        off: function(event, handler) {
            return this.each(function() {
                this.removeEventListener(event, handler);
            });
        },
        
        click: function(handler) {
            return handler ? this.on('click', handler) : this.each(function() {
                this.click();
            });
        },
        
        // 显示/隐藏
        show: function() {
            return this.css('display', 'block');
        },
        
        hide: function() {
            return this.css('display', 'none');
        },
        
        // 查找方法
        find: function(selector) {
            var result = $();
            this.each(function() {
                var found = this.querySelectorAll(selector);
                for (var i = 0; i < found.length; i++) {
                    result[result.length++] = found[i];
                }
            });
            return result;
        }
    };
    
    // 让init函数使用$.fn作为原型
    $.fn.init.prototype = $.fn;
    
    // 静态方法
    $.extend = function(target, source) {
        for (var key in source) {
            if (source.hasOwnProperty(key)) {
                target[key] = source[key];
            }
        }
        return target;
    };
    
    // DOM ready的简化版本
    $.ready = function(callback) {
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', callback);
        } else {
            callback();
        }
    };
    
    // 暴露到全局
    window.$ = window.jQuery = $;
    
})(window);

// 兼容性检查和性能优化
if (typeof console === 'undefined') {
    window.console = { log: function() {}, error: function() {}, warn: function() {} };
}
